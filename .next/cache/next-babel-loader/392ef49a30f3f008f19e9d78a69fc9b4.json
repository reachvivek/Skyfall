{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\V.K. SINGH\\\\Desktop\\\\American Express\\\\Skyfall\\\\Frontend\\\\components\\\\CogAuthTools\\\\Accounts.js\";\nvar __jsx = React.createElement;\nimport React, { createContext } from \"react\";\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\nimport Pool from \"../UserPool\";\nconst AccountContext = createContext();\n\nconst Account = props => {\n  const getSession = async () => await new Promise((resolve, reject) => {\n    const user = Pool.getCurrentUser();\n\n    if (user) {\n      user.getSession((err, session) => {\n        if (err) {\n          reject();\n        } else {\n          resolve(session);\n        }\n      });\n    } else {\n      reject();\n    }\n  });\n\n  const authenticate = async (Username, Password) => await new Promise((resolve, reject) => {\n    const user = new CognitoUser({\n      Username,\n      Pool\n    });\n    const authDetails = new AuthenticationDetails({\n      Username,\n      Password\n    });\n    user.authenticateUser(authDetails, {\n      onSuccess: data => {\n        console.log(\"onSuccess:\", data);\n        resolve(data);\n      },\n      onFailure: err => {\n        console.error(\"onFailure:\", err);\n        reject(err);\n      },\n      newPasswordRequired: data => {\n        console.log(\"newPasswordRequired:\", data);\n        resolve(data);\n      }\n    });\n  });\n\n  const logout = () => {\n    const user = Pool.getCurrentUser();\n\n    if (user) {\n      user.signOut();\n    }\n  };\n\n  return __jsx(AccountContext.Provider, {\n    value: {\n      authenticate,\n      getSession,\n      logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport { Account, AccountContext };","map":{"version":3,"sources":["C:/Users/V.K. SINGH/Desktop/American Express/Skyfall/Frontend/components/CogAuthTools/Accounts.js"],"names":["React","createContext","CognitoUser","AuthenticationDetails","Pool","AccountContext","Account","props","getSession","Promise","resolve","reject","user","getCurrentUser","err","session","authenticate","Username","Password","authDetails","authenticateUser","onSuccess","data","console","log","onFailure","error","newPasswordRequired","logout","signOut","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,WAAT,EAAsBC,qBAAtB,QAAmD,4BAAnD;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,cAAc,GAAGJ,aAAa,EAApC;;AAEA,MAAMK,OAAO,GAAIC,KAAD,IAAW;AACzB,QAAMC,UAAU,GAAG,YACjB,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrC,UAAMC,IAAI,GAAGR,IAAI,CAACS,cAAL,EAAb;;AACA,QAAID,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACJ,UAAL,CAAgB,CAACM,GAAD,EAAMC,OAAN,KAAkB;AAChC,YAAID,GAAJ,EAAS;AACPH,UAAAA,MAAM;AACP,SAFD,MAEO;AACLD,UAAAA,OAAO,CAACK,OAAD,CAAP;AACD;AACF,OAND;AAOD,KARD,MAQO;AACLJ,MAAAA,MAAM;AACP;AACF,GAbK,CADR;;AAgBA,QAAMK,YAAY,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KACnB,MAAM,IAAIT,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrC,UAAMC,IAAI,GAAG,IAAIV,WAAJ,CAAgB;AAAEe,MAAAA,QAAF;AAAYb,MAAAA;AAAZ,KAAhB,CAAb;AACA,UAAMe,WAAW,GAAG,IAAIhB,qBAAJ,CAA0B;AAAEc,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAA1B,CAApB;AAEAN,IAAAA,IAAI,CAACQ,gBAAL,CAAsBD,WAAtB,EAAmC;AACjCE,MAAAA,SAAS,EAAGC,IAAD,IAAU;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,IAA1B;AACAZ,QAAAA,OAAO,CAACY,IAAD,CAAP;AACD,OAJgC;AAMjCG,MAAAA,SAAS,EAAGX,GAAD,IAAS;AAClBS,QAAAA,OAAO,CAACG,KAAR,CAAc,YAAd,EAA4BZ,GAA5B;AACAH,QAAAA,MAAM,CAACG,GAAD,CAAN;AACD,OATgC;AAWjCa,MAAAA,mBAAmB,EAAGL,IAAD,IAAU;AAC7BC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,IAApC;AACAZ,QAAAA,OAAO,CAACY,IAAD,CAAP;AACD;AAdgC,KAAnC;AAgBD,GApBK,CADR;;AAuBA,QAAMM,MAAM,GAAG,MAAM;AACnB,UAAMhB,IAAI,GAAGR,IAAI,CAACS,cAAL,EAAb;;AACA,QAAID,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACiB,OAAL;AACD;AACF,GALD;;AAOA,SACE,MAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AACLb,MAAAA,YADK;AAELR,MAAAA,UAFK;AAGLoB,MAAAA;AAHK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGrB,KAAK,CAACuB,QAPT,CADF;AAWD,CA1DD;;AA4DA,SAASxB,OAAT,EAAkBD,cAAlB","sourcesContent":["import React, { createContext } from \"react\";\r\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\r\nimport Pool from \"../UserPool\";\r\n\r\nconst AccountContext = createContext();\r\n\r\nconst Account = (props) => {\r\n  const getSession = async () =>\r\n    await new Promise((resolve, reject) => {\r\n      const user = Pool.getCurrentUser();\r\n      if (user) {\r\n        user.getSession((err, session) => {\r\n          if (err) {\r\n            reject();\r\n          } else {\r\n            resolve(session);\r\n          }\r\n        });\r\n      } else {\r\n        reject();\r\n      }\r\n    });\r\n\r\n  const authenticate = async (Username, Password) =>\r\n    await new Promise((resolve, reject) => {\r\n      const user = new CognitoUser({ Username, Pool });\r\n      const authDetails = new AuthenticationDetails({ Username, Password });\r\n\r\n      user.authenticateUser(authDetails, {\r\n        onSuccess: (data) => {\r\n          console.log(\"onSuccess:\", data);\r\n          resolve(data);\r\n        },\r\n\r\n        onFailure: (err) => {\r\n          console.error(\"onFailure:\", err);\r\n          reject(err);\r\n        },\r\n\r\n        newPasswordRequired: (data) => {\r\n          console.log(\"newPasswordRequired:\", data);\r\n          resolve(data);\r\n        },\r\n      });\r\n    });\r\n\r\n  const logout = () => {\r\n    const user = Pool.getCurrentUser();\r\n    if (user) {\r\n      user.signOut();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AccountContext.Provider\r\n      value={{\r\n        authenticate,\r\n        getSession,\r\n        logout,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AccountContext.Provider>\r\n  );\r\n};\r\n\r\nexport { Account, AccountContext };\r\n"]},"metadata":{},"sourceType":"module"}