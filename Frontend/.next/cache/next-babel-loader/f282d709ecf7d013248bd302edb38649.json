{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\V.K. SINGH\\\\Desktop\\\\American Express\\\\Skyfall\\\\Frontend\\\\components\\\\CogAuthTools\\\\Accounts.js\";\n\nvar __jsx = React.createElement;\nimport React, { createContext } from \"react\";\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\nimport Pool from \"../UserPool\";\nvar AccountContext = createContext();\n\nvar Account = function Account(props) {\n  var getSession = function getSession() {\n    return _regeneratorRuntime.async(function getSession$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n              var user = Pool.getCurrentUser();\n\n              if (user) {\n                user.getSession(function (err, session) {\n                  if (err) {\n                    reject();\n                  } else {\n                    resolve(session);\n                  }\n                });\n              } else {\n                reject();\n              }\n            }));\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var authenticate = function authenticate(Username, Password) {\n    return _regeneratorRuntime.async(function authenticate$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n              var user = new CognitoUser({\n                Username: Username,\n                Pool: Pool\n              });\n              var authDetails = new AuthenticationDetails({\n                Username: Username,\n                Password: Password\n              });\n              user.authenticateUser(authDetails, {\n                onSuccess: function onSuccess(data) {\n                  console.log(\"onSuccess:\", data);\n                  resolve(data);\n                },\n                onFailure: function onFailure(err) {\n                  console.error(\"onFailure:\", err);\n                  reject(err);\n                },\n                newPasswordRequired: function newPasswordRequired(data) {\n                  console.log(\"newPasswordRequired:\", data);\n                  resolve(data);\n                }\n              });\n            }));\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var logout = function logout() {\n    var user = Pool.getCurrentUser();\n\n    if (user) {\n      user.signOut();\n    }\n  };\n\n  return __jsx(AccountContext.Provider, {\n    value: {\n      authenticate: authenticate,\n      getSession: getSession,\n      logout: logout\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport { Account, AccountContext };","map":{"version":3,"sources":["C:/Users/V.K. SINGH/Desktop/American Express/Skyfall/Frontend/components/CogAuthTools/Accounts.js"],"names":["React","createContext","CognitoUser","AuthenticationDetails","Pool","AccountContext","Account","props","getSession","Promise","resolve","reject","user","getCurrentUser","err","session","authenticate","Username","Password","authDetails","authenticateUser","onSuccess","data","console","log","onFailure","error","newPasswordRequired","logout","signOut","children"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,WAAT,EAAsBC,qBAAtB,QAAmD,4BAAnD;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,IAAMC,cAAc,GAAGJ,aAAa,EAApC;;AAEA,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACX,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,kBAAMC,IAAI,GAAGR,IAAI,CAACS,cAAL,EAAb;;AACA,kBAAID,IAAJ,EAAU;AACRA,gBAAAA,IAAI,CAACJ,UAAL,CAAgB,UAACM,GAAD,EAAMC,OAAN,EAAkB;AAChC,sBAAID,GAAJ,EAAS;AACPH,oBAAAA,MAAM;AACP,mBAFD,MAEO;AACLD,oBAAAA,OAAO,CAACK,OAAD,CAAP;AACD;AACF,iBAND;AAOD,eARD,MAQO;AACLJ,gBAAAA,MAAM;AACP;AACF,aAbK,CADW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAgBA,MAAMK,YAAY,GAAG,SAAfA,YAAe,CAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACb,IAAIT,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,kBAAMC,IAAI,GAAG,IAAIV,WAAJ,CAAgB;AAAEe,gBAAAA,QAAQ,EAARA,QAAF;AAAYb,gBAAAA,IAAI,EAAJA;AAAZ,eAAhB,CAAb;AACA,kBAAMe,WAAW,GAAG,IAAIhB,qBAAJ,CAA0B;AAAEc,gBAAAA,QAAQ,EAARA,QAAF;AAAYC,gBAAAA,QAAQ,EAARA;AAAZ,eAA1B,CAApB;AAEAN,cAAAA,IAAI,CAACQ,gBAAL,CAAsBD,WAAtB,EAAmC;AACjCE,gBAAAA,SAAS,EAAE,mBAACC,IAAD,EAAU;AACnBC,kBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,IAA1B;AACAZ,kBAAAA,OAAO,CAACY,IAAD,CAAP;AACD,iBAJgC;AAMjCG,gBAAAA,SAAS,EAAE,mBAACX,GAAD,EAAS;AAClBS,kBAAAA,OAAO,CAACG,KAAR,CAAc,YAAd,EAA4BZ,GAA5B;AACAH,kBAAAA,MAAM,CAACG,GAAD,CAAN;AACD,iBATgC;AAWjCa,gBAAAA,mBAAmB,EAAE,6BAACL,IAAD,EAAU;AAC7BC,kBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,IAApC;AACAZ,kBAAAA,OAAO,CAACY,IAAD,CAAP;AACD;AAdgC,eAAnC;AAgBD,aApBK,CADa;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAuBA,MAAMM,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,QAAMhB,IAAI,GAAGR,IAAI,CAACS,cAAL,EAAb;;AACA,QAAID,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACiB,OAAL;AACD;AACF,GALD;;AAOA,SACE,MAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AACLb,MAAAA,YAAY,EAAZA,YADK;AAELR,MAAAA,UAAU,EAAVA,UAFK;AAGLoB,MAAAA,MAAM,EAANA;AAHK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGrB,KAAK,CAACuB,QAPT,CADF;AAWD,CA1DD;;AA4DA,SAASxB,OAAT,EAAkBD,cAAlB","sourcesContent":["import React, { createContext } from \"react\";\r\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\r\nimport Pool from \"../UserPool\";\r\n\r\nconst AccountContext = createContext();\r\n\r\nconst Account = (props) => {\r\n  const getSession = async () =>\r\n    await new Promise((resolve, reject) => {\r\n      const user = Pool.getCurrentUser();\r\n      if (user) {\r\n        user.getSession((err, session) => {\r\n          if (err) {\r\n            reject();\r\n          } else {\r\n            resolve(session);\r\n          }\r\n        });\r\n      } else {\r\n        reject();\r\n      }\r\n    });\r\n\r\n  const authenticate = async (Username, Password) =>\r\n    await new Promise((resolve, reject) => {\r\n      const user = new CognitoUser({ Username, Pool });\r\n      const authDetails = new AuthenticationDetails({ Username, Password });\r\n\r\n      user.authenticateUser(authDetails, {\r\n        onSuccess: (data) => {\r\n          console.log(\"onSuccess:\", data);\r\n          resolve(data);\r\n        },\r\n\r\n        onFailure: (err) => {\r\n          console.error(\"onFailure:\", err);\r\n          reject(err);\r\n        },\r\n\r\n        newPasswordRequired: (data) => {\r\n          console.log(\"newPasswordRequired:\", data);\r\n          resolve(data);\r\n        },\r\n      });\r\n    });\r\n\r\n  const logout = () => {\r\n    const user = Pool.getCurrentUser();\r\n    if (user) {\r\n      user.signOut();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AccountContext.Provider\r\n      value={{\r\n        authenticate,\r\n        getSession,\r\n        logout,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AccountContext.Provider>\r\n  );\r\n};\r\n\r\nexport { Account, AccountContext };\r\n"]},"metadata":{},"sourceType":"module"}